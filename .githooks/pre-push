#!/bin/bash
# Pre-push hook for cloud-update
# Runs quality checks and tests before allowing push

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}╔════════════════════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║            🔍 Pre-Push Quality Validation 🔍              ║${NC}"
echo -e "${BLUE}╚════════════════════════════════════════════════════════════╝${NC}"
echo ""

# Get the branch being pushed
BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo -e "${YELLOW}▶ Validating branch: ${BRANCH}${NC}"
echo ""

# Step 1: Format code  
echo -e "${YELLOW}▶ Step 1/4: Formatting code...${NC}"
if make quality/format > /tmp/format.log 2>&1; then
    echo -e "${GREEN}✓ Code formatted${NC}"
    
    # Check if there are any changes after formatting (excluding problematic YAML)
    CHANGED_FILES=$(git diff --name-only | grep -v -E "(\.github/workflows/ci\.yml|\.golangci\.yml|\.gosec\.json|src/test/e2e/docker-compose\.yml)$" || true)
    if [ -n "$CHANGED_FILES" ]; then
        echo -e "${RED}✗ Code formatting changed files!${NC}"
        echo -e "${YELLOW}  Please commit the formatted files before pushing:${NC}"
        echo "$CHANGED_FILES"
        echo ""
        echo -e "${YELLOW}  Run: git add . && git commit -m 'chore: format code'${NC}"
        exit 1
    fi
else
    echo -e "${RED}✗ Format failed${NC}"
    cat /tmp/format.log
    exit 1
fi

# Step 2: Run linters
echo -e "${YELLOW}▶ Step 2/4: Running linters...${NC}"
if make quality/lint > /tmp/lint.log 2>&1; then
    echo -e "${GREEN}✓ Linting passed${NC}"
else
    echo -e "${RED}✗ Linting failed${NC}"
    echo -e "${YELLOW}  Showing errors:${NC}"
    cat /tmp/lint.log | grep -E "^[^#].*\.(go|yml|yaml|json):" | head -20
    echo ""
    echo -e "${YELLOW}  Run 'make quality/fix' to auto-fix some issues${NC}"
    exit 1
fi

# Step 3: Security scan
echo -e "${YELLOW}▶ Step 3/4: Running security scan...${NC}"
if make quality/security > /tmp/security.log 2>&1; then
    echo -e "${GREEN}✓ Security scan passed${NC}"
else
    echo -e "${RED}✗ Security scan failed${NC}"
    echo -e "${YELLOW}  Security issues found:${NC}"
    cat /tmp/security.log | grep -E "G[0-9]{3}" | head -10
    echo ""
    echo -e "${YELLOW}  Security scan is BLOCKING. All legitimate issues should be excluded via .gosec.json${NC}"
    echo -e "${YELLOW}  Run 'make quality/security' to see full output${NC}"
    exit 1
fi

# Step 4: Run unit tests
echo -e "${YELLOW}▶ Step 4/4: Running unit tests...${NC}"
if make test/unit > /tmp/test.log 2>&1; then
    echo -e "${GREEN}✓ Unit tests passed${NC}"
else
    echo -e "${RED}✗ Unit tests failed${NC}"
    echo -e "${YELLOW}  Failed tests:${NC}"
    cat /tmp/test.log | grep -E "FAIL|ERROR" | head -10
    echo ""
    echo -e "${YELLOW}  Run 'make test/unit' to see full output${NC}"
    exit 1
fi

echo ""
echo -e "${GREEN}╔════════════════════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║         ✅ All quality checks passed! ✅                  ║${NC}"
echo -e "${GREEN}║              Safe to push to ${BRANCH}                     ║${NC}"
echo -e "${GREEN}╚════════════════════════════════════════════════════════════╝${NC}"
echo ""

# Optional: Show what will be pushed
echo -e "${YELLOW}▶ Changes to be pushed:${NC}"
git log --oneline @{u}..HEAD | head -5

exit 0